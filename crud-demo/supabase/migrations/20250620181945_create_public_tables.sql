-- Create the notes table in the public schema
CREATE TABLE public.notes (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
  title text NOT NULL,
  content text,
  tags text[],
  is_favorite boolean DEFAULT false,
  created_at timestamptz DEFAULT now() NOT NULL,
  updated_at timestamptz DEFAULT now() NOT NULL
);

-- Create other related tables you might need
CREATE TABLE public.categories (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL UNIQUE,
  color text DEFAULT '#3b82f6',
  created_at timestamptz DEFAULT now() NOT NULL
);

CREATE TABLE public.note_categories (
  note_id bigint REFERENCES public.notes(id) ON DELETE CASCADE,
  category_id bigint REFERENCES public.categories(id) ON DELETE CASCADE,
  PRIMARY KEY (note_id, category_id)
);


-- Enable Row Level Security (RLS) on the public notes table
ALTER TABLE public.notes ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Enable access to own notes" ON public.notes
AS PERMISSIVE FOR ALL
TO authenticated
USING (user_id = (select auth.uid()))
WITH CHECK (user_id = (select auth.uid()));


-- Grant permissions to the 'authenticated' role
GRANT ALL ON TABLE public.notes TO authenticated;
GRANT ALL ON TABLE public.categories TO authenticated;
GRANT ALL ON TABLE public.note_categories TO authenticated;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO authenticated;


-- Set up the trigger to automatically update the 'updated_at' column
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_notes_updated_at
BEFORE UPDATE ON public.notes
FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();