import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers':
    'authorization, x-client-info, apikey, content-type',
}

interface TenantRequest {
  tenant_name?: string
  user_email?: string
  custom_settings?: Record<string, any>
}

Deno.serve(async (req: Request) => {
  // Handle CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Get environment variables (using the standard Supabase env vars)
    const supabaseUrl = Deno.env.get('SUPABASE_URL') || 'http://localhost:54321'
    const serviceRoleKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')

    if (!serviceRoleKey) {
      throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable')
    }

    // Create admin client
    const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey)

    // Parse request body for tenant details
    let tenantData: TenantRequest = {}
    if (req.method === 'POST') {
      try {
        tenantData = await req.json()
      } catch {
        // If no valid JSON, proceed with defaults
      }
    }

    // Generate unique schema name
    const uuid = crypto.randomUUID().replace(/-/g, '')
    const schemaName = `tenant_${uuid}`

    // Extract tenant name for display
    const displayName = tenantData.tenant_name || `Tenant ${uuid.slice(0, 8)}`

    console.log(`Creating new tenant: ${displayName} (${schemaName})`)

    // Create comprehensive tenant schema with all tables
    const provisionSql = `
      -- Create tenant schema
      CREATE SCHEMA "${schemaName}";
      GRANT USAGE ON SCHEMA "${schemaName}" TO authenticated;
      GRANT CREATE ON SCHEMA "${schemaName}" TO authenticated;
      
      -- Notes table (main content)
      CREATE TABLE "${schemaName}".notes (
        id bigint generated by default as identity primary key,
        user_id uuid references auth.users(id) on delete cascade,
        title text not null,
        content text,
        tags text[],
        is_favorite boolean default false,
        created_at timestamptz default now() not null,
        updated_at timestamptz default now() not null
      );
      
      -- Categories table
      CREATE TABLE "${schemaName}".categories (
        id bigint generated by default as identity primary key,
        name text not null unique,
        color text default '#3b82f6',
        created_at timestamptz default now() not null
      );
      
      -- Note-Category relationship
      CREATE TABLE "${schemaName}".note_categories (
        note_id bigint references "${schemaName}".notes(id) on delete cascade,
        category_id bigint references "${schemaName}".categories(id) on delete cascade,
        primary key (note_id, category_id)
      );
      
      -- Tenant settings table
      CREATE TABLE "${schemaName}".tenant_settings (
        id bigint generated by default as identity primary key,
        setting_key text not null unique,
        setting_value jsonb,
        created_at timestamptz default now() not null,
        updated_at timestamptz default now() not null
      );
      
      -- User profiles for this tenant
      CREATE TABLE "${schemaName}".user_profiles (
        id uuid primary key references auth.users(id) on delete cascade,
        display_name text,
        avatar_url text,
        role text default 'user' check (role in ('admin', 'user', 'viewer')),
        is_active boolean default true,
        last_login timestamptz,
        created_at timestamptz default now() not null,
        updated_at timestamptz default now() not null
      );
      
      -- Grant permissions on all tables
      GRANT ALL ON TABLE "${schemaName}".notes TO authenticated;
      GRANT ALL ON TABLE "${schemaName}".categories TO authenticated;
      GRANT ALL ON TABLE "${schemaName}".note_categories TO authenticated;
      GRANT ALL ON TABLE "${schemaName}".tenant_settings TO authenticated;
      GRANT ALL ON TABLE "${schemaName}".user_profiles TO authenticated;
      
      -- Grant sequence permissions
      GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA "${schemaName}" TO authenticated;
      
      -- Create updated_at trigger function if it doesn't exist
      CREATE OR REPLACE FUNCTION update_updated_at_column()
      RETURNS TRIGGER AS $$
      BEGIN
        NEW.updated_at = now();
        RETURN NEW;
      END;
      $$ language 'plpgsql';
      
      -- Add updated_at triggers
      CREATE TRIGGER update_notes_updated_at 
        BEFORE UPDATE ON "${schemaName}".notes 
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
        
      CREATE TRIGGER update_tenant_settings_updated_at 
        BEFORE UPDATE ON "${schemaName}".tenant_settings 
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
        
      CREATE TRIGGER update_user_profiles_updated_at 
        BEFORE UPDATE ON "${schemaName}".user_profiles 
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
      
      -- Insert default categories
      INSERT INTO "${schemaName}".categories (name, color) VALUES 
        ('Personal', '#3b82f6'),
        ('Work', '#10b981'),
        ('Ideas', '#f59e0b'),
        ('Important', '#ef4444');
      
      -- Insert initial tenant settings
      INSERT INTO "${schemaName}".tenant_settings (setting_key, setting_value) VALUES 
        ('tenant_name', '"${displayName}"'),
        ('created_by', '"${tenantData.user_email || 'system'}"'),
        ('theme', '"default"'),
        ('features', '{"notes": true, "categories": true, "sharing": false}'),
        ('limits', '{"max_notes": 1000, "max_users": 10}');
    `

    // Execute the provisioning SQL
    const { error: rpcError } = await supabaseAdmin.rpc('execute_sql', {
      sql_query: provisionSql,
    })

    if (rpcError) {
      throw new Error(`Schema creation failed: ${rpcError.message}`)
    }

    console.log(
      `✅ Successfully created tenant: ${displayName} (${schemaName})`
    )

    // Return comprehensive tenant information
    const response = {
      success: true,
      tenant: {
        id: uuid,
        schema_name: schemaName,
        display_name: displayName,
        created_at: new Date().toISOString(),
        created_by: tenantData.user_email || 'system',
      },
      database: {
        schema: schemaName,
        tables: [
          'notes',
          'categories',
          'note_categories',
          'tenant_settings',
          'user_profiles',
        ],
        default_categories: ['Personal', 'Work', 'Ideas', 'Important'],
      },
      settings: {
        theme: 'default',
        features: {
          notes: true,
          categories: true,
          sharing: false,
        },
        limits: {
          max_notes: 1000,
          max_users: 10,
        },
      },
      next_steps: {
        connection_string: `Set schema search path to: "${schemaName}", public`,
        rls_note: 'Remember to enable RLS policies if needed',
        admin_user: 'First user should be granted admin role',
      },
    }

    return new Response(JSON.stringify(response), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    })
  } catch (error: any) {
    console.error('❌ Tenant provisioning failed:', error.message)

    return new Response(
      JSON.stringify({
        success: false,
        error: 'Tenant provisioning failed',
        message: error.message,
        timestamp: new Date().toISOString(),
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      }
    )
  }
})
