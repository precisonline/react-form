-- Create the main table for storing notes
CREATE TABLE public.notes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  title TEXT,
  content TEXT,
  user_id UUID REFERENCES auth.users(id) DEFAULT auth.uid() NOT NULL
);

-- Add a comment to explain the user_id column's purpose
COMMENT ON COLUMN public.notes.user_id IS 'The user who created the note';


--
-- ROW LEVEL SECURITY (RLS) POLICIES
--

-- 1. Enable Row Level Security for the 'notes' table
ALTER TABLE public.notes ENABLE ROW LEVEL SECURITY;

-- 2. Create a policy that allows authenticated users to INSERT a new note
-- This policy also ensures that the user_id of the new note matches the id of the person creating it.
CREATE POLICY "Allow authenticated users to create notes"
ON public.notes FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

-- 3. Create a policy that allows authenticated users to SELECT (read) their own notes
-- Users can only see notes where their own user ID matches the note's user_id.
CREATE POLICY "Allow authenticated users to read their own notes"
ON public.notes FOR SELECT
TO authenticated
USING (auth.uid() = user_id);

-- 4. Create a policy for UPDATE
CREATE POLICY "Allow authenticated users to update their own notes"
ON public.notes FOR UPDATE
TO authenticated
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- 5. Create a policy for DELETE
CREATE POLICY "Allow authenticated users to delete their own notes"
ON public.notes FOR DELETE
TO authenticated
USING (auth.uid() = user_id);